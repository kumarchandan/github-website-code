{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js","webpack:///./src/pages/404.js"],"names":["Header","_ref","siteTitle","___EmotionJSX","style","marginBottom","margin","maxWidth","padding","display","justifyContent","Link","to","color","textDecoration","defaultProps","Layout","children","data","useStaticQuery","React","Fragment","site","siteMetadata","title","Date","getFullYear","SEO","description","lang","meta","metaDescription","Helmet","htmlAttributes","titleTemplate","name","content","property","author","concat","NotFoundPage"],"mappings":"qKAIMA,EAAS,SAAHC,GAAeA,EAATC,UAAS,OACzBC,YAAA,UACEC,MAAO,CACLC,aAAa,YAGfF,YAAA,OACEC,MAAO,CACLE,OAAO,SACPC,SAAU,IACVC,QAAQ,oBACRC,QAAS,OACTC,eAAgB,aAGlBP,YAAA,WACEA,YAAA,MAAIC,MAAO,CAAEE,OAAQ,KACnBH,YAACQ,OAAI,CACHC,GAAG,IACHR,MAAO,CACLS,MAAM,UACNC,eAAe,SAElB,UAKLX,YAAA,WACEA,YAAA,MAAIC,MAAO,CAAEE,OAAQ,KACnBH,YAACQ,OAAI,CAACC,GAAG,SAAUR,MAAO,CAAES,MAAM,UAAYC,eAAe,SAAa,aAapFd,EAAOe,aAAe,CACpBb,UAAU,2BAGGF,Q,UCHAgB,IAlCA,SAAHf,GAAsB,IAAhBgB,EAAQhB,EAARgB,SACVC,EAAOC,yBAAe,cAU5B,OACEhB,YAAAiB,IAAAC,SAAA,KACElB,YAACH,EAAM,CAACE,UAAWgB,EAAKI,KAAKC,aAAaC,QAC1CrB,YAAA,OACEC,MAAO,CACLE,OAAO,SACPC,SAAU,IACVC,QAAQ,wBAGVL,YAAA,YAAOc,GACPd,YAAA,cAAQ,MACH,IAAIsB,MAAOC,cAAc,KAAGR,EAAKI,KAAKC,aAAaC,W,kCCrChE,2DAYA,SAASG,EAAG1B,GAAsC,IAAnC2B,EAAW3B,EAAX2B,YAAaC,EAAI5B,EAAJ4B,KAAMC,EAAI7B,EAAJ6B,KAAMN,EAAKvB,EAALuB,MAC9BF,EAASH,yBAAe,YAAxBG,KAcFS,EAAkBH,GAAeN,EAAKC,aAAaK,YAEzD,OACEzB,YAAC6B,IAAM,CACLC,eAAgB,CACdJ,QAEFL,MAAOA,EACPU,cAAa,QAAUZ,EAAKC,aAAaC,MACzCM,KAAM,CACJ,CACEK,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASZ,GAEX,CACEa,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASd,EAAKC,aAAae,QAE7B,CACEH,KAAK,gBACLC,QAASZ,GAEX,CACEW,KAAK,sBACLC,QAASL,IAEXQ,OAAOT,KAKfH,EAAIZ,aAAe,CACjBc,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD,O,kCCvFf,yDAaea,UARM,WAAH,OAChBrC,YAACa,IAAM,KACLb,YAACwB,IAAG,CAACH,MAAM,mBACXrB,YAAA,UAAI,aACJA,YAAA,SAAG","file":"component---src-pages-404-js-a0d4ada7e32bbb86c28b.js","sourcesContent":["import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n        display: 'flex',\n        justifyContent: 'flex-end'\n      }}\n    >\n      <div>\n        <h4 style={{ margin: 10 }}>\n          <Link\n            to=\"/\"\n            style={{\n              color: `#007acc`,\n              textDecoration: `none`,\n            }}\n          >\n            Home\n          </Link>\n        </h4>\n      </div>\n      <div>\n        <h4 style={{ margin: 10 }}>\n          <Link to=\"/blog/\"  style={{ color: `#007acc`, textDecoration: `none`, }} >\n            Blog\n          </Link>\n        </h4>\n      </div>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: `Chandan Kumar's Website`,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          Â© {new Date().getFullYear()}, {data.site.siteMetadata.title}\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst NotFoundPage = () => (\n  <Layout>\n    <SEO title=\"404: Not found\" />\n    <h1>NOT FOUND</h1>\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n  </Layout>\n)\n\nexport default NotFoundPage\n"],"sourceRoot":""}