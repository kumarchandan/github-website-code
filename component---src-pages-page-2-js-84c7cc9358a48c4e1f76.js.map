{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/pages/page-2.js","webpack:///./src/components/seo.js"],"names":["Header","siteTitle","style","marginBottom","margin","maxWidth","padding","display","justifyContent","to","color","textDecoration","defaultProps","Layout","children","data","useStaticQuery","site","siteMetadata","title","Date","getFullYear","SecondPage","SEO","description","lang","meta","metaDescription","htmlAttributes","titleTemplate","name","content","property","author","concat"],"mappings":"sKAIMA,EAAS,SAAC,GAAD,EAAGC,UAAH,OACb,sBACEC,MAAO,CACLC,aAAa,YAGf,mBACED,MAAO,CACLE,OAAO,SACPC,SAAU,IACVC,QAAQ,oBACRC,QAAS,OACTC,eAAgB,aAGlB,uBACE,kBAAIN,MAAO,CAAEE,OAAQ,KACnB,YAAC,OAAD,CACEK,GAAG,IACHP,MAAO,CACLQ,MAAM,UACNC,eAAe,SAJnB,UAWJ,uBACE,kBAAIT,MAAO,CAAEE,OAAQ,KACnB,YAAC,OAAD,CAAMK,GAAG,SAAUP,MAAO,CAAEQ,MAAM,UAAYC,eAAe,SAA7D,aAaVX,EAAOY,aAAe,CACpBX,UAAU,2BAGGD,Q,UCHAa,IAlCA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACVC,EAAOC,yBAAe,cAU5B,OACE,8BACE,YAAC,EAAD,CAAQf,UAAWc,EAAKE,KAAKC,aAAaC,QAC1C,mBACEjB,MAAO,CACLE,OAAO,SACPC,SAAU,IACVC,QAAQ,wBAGV,wBAAOQ,GACP,gCACK,IAAIM,MAAOC,cADhB,KACiCN,EAAKE,KAAKC,aAAaC,W,kCCrChE,qEAeeG,UATI,kBACjB,YAAC,IAAD,KACE,YAAC,IAAD,CAAKH,MAAM,aACX,iDACA,0CACA,YAAC,OAAD,CAAMV,GAAG,KAAT,8B,kCCXJ,2DAYA,SAASc,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMP,EAAS,EAATA,MAC9BF,EAASD,yBAAe,YAAxBC,KAcFU,EAAkBH,GAAeP,EAAKC,aAAaM,YAEzD,OACE,YAAC,IAAD,CACEI,eAAgB,CACdH,QAEFN,MAAOA,EACPU,cAAa,QAAUZ,EAAKC,aAAaC,MACzCO,KAAM,CACJ,CACEI,KAAK,cACLC,QAASJ,GAEX,CACEK,SAAS,WACTD,QAASZ,GAEX,CACEa,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASd,EAAKC,aAAae,QAE7B,CACEH,KAAK,gBACLC,QAASZ,GAEX,CACEW,KAAK,sBACLC,QAASJ,IAEXO,OAAOR,KAKfH,EAAIX,aAAe,CACjBa,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-pages-page-2-js-84c7cc9358a48c4e1f76.js","sourcesContent":["import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n        display: 'flex',\n        justifyContent: 'flex-end'\n      }}\n    >\n      <div>\n        <h4 style={{ margin: 10 }}>\n          <Link\n            to=\"/\"\n            style={{\n              color: `#007acc`,\n              textDecoration: `none`,\n            }}\n          >\n            Home\n          </Link>\n        </h4>\n      </div>\n      <div>\n        <h4 style={{ margin: 10 }}>\n          <Link to=\"/blog/\"  style={{ color: `#007acc`, textDecoration: `none`, }} >\n            Blog\n          </Link>\n        </h4>\n      </div>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: `Chandan Kumar's Website`,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          Â© {new Date().getFullYear()}, {data.site.siteMetadata.title}\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst SecondPage = () => (\n  <Layout>\n    <SEO title=\"Page two\" />\n    <h1>Hi from the second page</h1>\n    <p>Welcome to page 2</p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport default SecondPage\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}